#还是generalize的过程，有了四层循环，其实也就意味着，可以有k层循环的问题。我想到的是每一次for循环一层，时间复杂度比较高，没有想到其他好的办法，但答案其实也是这么处理的。但是具体来说，并不是写四次循环，这就需要用到递归，用参数k来记录当前循环的层数，如果参数不合法就排除，如果到了basecase就计算，否则的话，就for循环本层然后递归。

class Solution:
    def fourSum(self, nums: List[int], target: int) -> List[List[int]]:
        def kSum(nums: List[int], target:int, k:int) -> List[List[int]]:
            ret = []
            if len(nums) == 0 or nums[0] * k > target or nums[-1] * k < target:
                return ret
            if k == 2:
                return twoSum(nums, target)
            for i in range(len(nums)):
                if i == 0 or nums[i] != nums[i - 1]: #去重不能落下
                    for _, result in enumerate(kSum(nums[i + 1:], target - nums[i], k - 1)): #enumerate的方法
                        ret.append([nums[i]] + result)
            return ret
        
        def twoSum(nums: List[int], target:int)-> List[List[int]]:
            ret = []
            left, right = 0, len(nums) - 1
            while left < right:
                sum = nums[left] + nums[right]
                if sum < target:
                    left += 1
                elif sum > target:
                    right -= 1
                else:
                    ret.append([nums[left], nums[right]])
                    left += 1
                    right -= 1
                    while left < right and nums[left] == nums[left - 1]:
                        left += 1
            return ret
        
        nums.sort()
        return kSum(nums, target, 4)

#M2其实就是跟hashset结合起来
class Solution:
    def fourSum(self, nums: List[int], target: int) -> List[List[int]]:
        def kSum(nums: List[int], target:int, k:int) -> List[List[int]]:
            ret = []
            if len(nums) == 0 or nums[0] * k > target or nums[-1] * k < target:
                return ret
            if k == 2:
                return twoSum(nums, target)
            for i in range(len(nums)):
                if i == 0 or nums[i] != nums[i - 1]: #去重不能落下
                    for _, result in enumerate(kSum(nums[i + 1:], target - nums[i], k - 1)):
                        ret.append([nums[i]] + result)
            return ret
        
        def twoSum(nums: List[int], target:int)-> List[List[int]]:
            ret = []
            seen = set()
            i = 0
            while i < len(nums):#这块跟三个的不太一样，因为是从0开始的，没有一个开始的index，至于遍历的形式是跟后面check的形式相符合的
                remain = target - nums[i]
                if remain in seen:
                    ret.append([nums[i], remain])
                    while i + 1 < len(nums) and nums[i] == nums[i + 1]:
                        i += 1
                seen.add(nums[i])
                i += 1
            return ret
        
        nums.sort()
        return kSum(nums, target, 4)
        

